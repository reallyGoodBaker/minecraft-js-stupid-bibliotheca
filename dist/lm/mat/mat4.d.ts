import { Vec3, Vector3 } from "../vec/vec3.js";
import { Vec4, Vector4 } from "../vec/vec4.js";
export declare class Matrix extends Float64Array {
    constructor();
    get m11(): number;
    get m12(): number;
    get m13(): number;
    get m14(): number;
    get m21(): number;
    get m22(): number;
    get m23(): number;
    get m24(): number;
    get m31(): number;
    get m32(): number;
    get m33(): number;
    get m34(): number;
    get m41(): number;
    get m42(): number;
    get m43(): number;
    get m44(): number;
    set m11(v: number);
    set m12(v: number);
    set m13(v: number);
    set m14(v: number);
    set m21(v: number);
    set m22(v: number);
    set m23(v: number);
    set m24(v: number);
    set m31(v: number);
    set m32(v: number);
    set m33(v: number);
    set m34(v: number);
    set m41(v: number);
    set m42(v: number);
    set m43(v: number);
    set m44(v: number);
    get a(): number;
    get b(): number;
    get c(): number;
    get d(): number;
    get e(): number;
    get f(): number;
    set a(v: number);
    set b(v: number);
    set c(v: number);
    set d(v: number);
    set e(v: number);
    set f(v: number);
    static init(init: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Matrix;
    clone(): Matrix;
    setIdentity(): this;
    static identity(): Matrix;
    static add(m1: Matrix, m2: Matrix): Matrix;
    add(m: Matrix): Matrix;
    static sub(m1: Matrix, m2: Matrix): Matrix;
    sub(m: Matrix): Matrix;
    setTranslation(x: number, y: number, z: number): this;
    setRotation(angle: number, axis: Vec3): this;
    setScale(x: number, y: number, z: number): this;
    setRotationX(angle: number): this;
    setRotationY(angle: number): this;
    setRotationZ(angle: number): this;
    setRotationXYZ(yaw: number, pitch: number, roll: number): this;
    static translate(mat: Matrix, vec: Vector3): Matrix;
    translate(vec: Vector3): Matrix;
    static transpose(mat: Matrix): Float64Array;
    transpose(): Float64Array;
    static multiply(mat1: Matrix, t: Matrix | Vector4): Float64Array | Vec4;
    multiply(t: Matrix | Vector4): Float64Array | Vec4;
    valueOf(): Float64Array;
    toString(): string;
    static perspective(fov: number, aspect: number, near: number, far: number): Float64Array;
    static orthographic(right: number, top: number, near: number, far: number): Float64Array;
    static lookAt(eye: Vector3, target: Vector3, up: Vector3): Float64Array;
}
